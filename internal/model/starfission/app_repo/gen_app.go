///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package app_repo

import (
	"fmt"
	"time"

	"starfission_go_api/global"
	"starfission_go_api/internal/model"
	"starfission_go_api/pkg/timef"

	"github.com/pkg/errors"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

func Connection() *gorm.DB {
	db := global.DBEngine
	db.Config.NamingStrategy = schema.NamingStrategy{
		TablePrefix:   "pre_", // 表名前缀
		SingularTable: true,   // 使用单数表名
	}
	return db
}

func NewModel() *App {
	return new(App)
}

type appRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	whereRaw []struct {
		query  string
		values []interface{}
	}
	limit  int
	offset int
}

func NewQueryBuilder() *appRepoQueryBuilder {
	return new(appRepoQueryBuilder)
}

func (qb *appRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := Connection()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, where2 := range qb.whereRaw {
		ret = ret.Where(where2.query, where2.values...)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (t *App) Create() (id int64, err error) {
	t.CreatedAt = timef.Now()
	db := Connection()
	if err = db.Model(t).Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.AppId, nil
}

func (t *App) Save() (err error) {
	t.UpdatedAt = timef.Now()

	db := Connection()
	if err = db.Model(t).Save(t).Error; err != nil {
		return errors.Wrap(err, "update err")
	}
	return nil
}

func (qb *appRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {

	db := Connection()
	db = db.Model(&App{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

// 自减
func (qb *appRepoQueryBuilder) Increment(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&App{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" + ?", value)).Error; err != nil {
		return errors.Wrap(err, "increment err")
	}
	return nil
}

// 自增
func (qb *appRepoQueryBuilder) Decrement(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&App{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" - ?", value)).Error; err != nil {
		return errors.Wrap(err, "decrement err")
	}
	return nil
}

func (qb *appRepoQueryBuilder) Delete() (err error) {

	db := Connection()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&App{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *appRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&App{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *appRepoQueryBuilder) First() (*App, error) {
	ret := &App{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *appRepoQueryBuilder) Get() ([]*App, error) {
	return qb.QueryAll()
}

func (qb *appRepoQueryBuilder) QueryOne() (*App, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *appRepoQueryBuilder) QueryAll() ([]*App, error) {
	var ret []*App
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *appRepoQueryBuilder) Limit(limit int) *appRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *appRepoQueryBuilder) Offset(offset int) *appRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *appRepoQueryBuilder) WhereRaw(query string, values ...interface{}) *appRepoQueryBuilder {
	vals := make([]interface{}, len(values))
	for i, v := range values {
		vals[i] = v
	}
	qb.whereRaw = append(qb.whereRaw, struct {
		query  string
		values []interface{}
	}{
		query,
		vals,
	})
	return qb
}

// ----------

func (qb *appRepoQueryBuilder) WhereAppId(p model.Predicate, value int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppIdIn(value []int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppIdNotIn(value []int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByAppId(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_id` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppName(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_name", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppNameIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_name", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppNameNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByAppName(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_name` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppUrl(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_url", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppUrlIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_url", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppUrlNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByAppUrl(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_url` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecret(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecretIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereAppSecretNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_secret", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByAppSecret(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_secret` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereGoodsId(p model.Predicate, value int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereGoodsIdIn(value []int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereGoodsIdNotIn(value []int64) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByGoodsId(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`goods_id` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereNotifyDomain(p model.Predicate, value string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_domain", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereNotifyDomainIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_domain", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereNotifyDomainNotIn(value []string) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_domain", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByNotifyDomain(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`notify_domain` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsPublished(p model.Predicate, value int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_published", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsPublishedIn(value []int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_published", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsPublishedNotIn(value []int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_published", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByIsPublished(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_published` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsDeleted(p model.Predicate, value int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsDeletedIn(value []int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereIsDeletedNotIn(value []int32) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByIsDeleted(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_deleted` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByCreatedAt(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`created_at` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByUpdatedAt(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`updated_at` "+order)
	return qb
}

func (qb *appRepoQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereDeletedAtIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *appRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appRepoQueryBuilder) OrderByDeletedAt(asc bool) *appRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`deleted_at` "+order)
	return qb
}
