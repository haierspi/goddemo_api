///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package admin_user_repo

import (
	"fmt"
	"time"

	"starfission_go_api/global"
	"starfission_go_api/internal/model"
	"starfission_go_api/pkg/timef"

	"github.com/pkg/errors"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

func Connection() *gorm.DB {
	db := global.DBEngine
	db.Config.NamingStrategy = schema.NamingStrategy{
		TablePrefix:   "pre_", // 表名前缀
		SingularTable: true,   // 使用单数表名
	}
	return db
}

func NewModel() *AdminUser {
	return new(AdminUser)
}

type adminUserRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	whereRaw []struct {
		query  string
		values []interface{}
	}
	limit  int
	offset int
}

func NewQueryBuilder() *adminUserRepoQueryBuilder {
	return new(adminUserRepoQueryBuilder)
}

func (qb *adminUserRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := Connection()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, where2 := range qb.whereRaw {
		ret = ret.Where(where2.query, where2.values...)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (t *AdminUser) Create() (id int64, err error) {
	t.CreatedAt = timef.Now()
	db := Connection()
	if err = db.Model(t).Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Auid, nil
}

func (t *AdminUser) Save() (err error) {
	t.UpdatedAt = timef.Now()

	db := Connection()
	if err = db.Model(t).Save(t).Error; err != nil {
		return errors.Wrap(err, "update err")
	}
	return nil
}

func (qb *adminUserRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {

	db := Connection()
	db = db.Model(&AdminUser{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

// 自减
func (qb *adminUserRepoQueryBuilder) Increment(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AdminUser{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" + ?", value)).Error; err != nil {
		return errors.Wrap(err, "increment err")
	}
	return nil
}

// 自增
func (qb *adminUserRepoQueryBuilder) Decrement(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AdminUser{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" - ?", value)).Error; err != nil {
		return errors.Wrap(err, "decrement err")
	}
	return nil
}

func (qb *adminUserRepoQueryBuilder) Delete() (err error) {

	db := Connection()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&AdminUser{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *adminUserRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&AdminUser{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *adminUserRepoQueryBuilder) First() (*AdminUser, error) {
	ret := &AdminUser{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *adminUserRepoQueryBuilder) Get() ([]*AdminUser, error) {
	return qb.QueryAll()
}

func (qb *adminUserRepoQueryBuilder) QueryOne() (*AdminUser, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *adminUserRepoQueryBuilder) QueryAll() ([]*AdminUser, error) {
	var ret []*AdminUser
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *adminUserRepoQueryBuilder) Limit(limit int) *adminUserRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *adminUserRepoQueryBuilder) Offset(offset int) *adminUserRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereRaw(query string, values ...interface{}) *adminUserRepoQueryBuilder {
	vals := make([]interface{}, len(values))
	for i, v := range values {
		vals[i] = v
	}
	qb.whereRaw = append(qb.whereRaw, struct {
		query  string
		values []interface{}
	}{
		query,
		vals,
	})
	return qb
}

// ----------

func (qb *adminUserRepoQueryBuilder) WhereAuid(p model.Predicate, value int64) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereAuidIn(value []int64) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereAuidNotIn(value []int64) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByAuid(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`auid` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUsername(p model.Predicate, value string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUsernameIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUsernameNotIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByUsername(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`username` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePassword(p model.Predicate, value string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePasswordIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePasswordNotIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "password", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByPassword(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`password` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereSalt(p model.Predicate, value string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salt", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereSaltIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salt", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereSaltNotIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "salt", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderBySalt(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`salt` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDateline(p model.Predicate, value int32) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDatelineIn(value []int32) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDatelineNotIn(value []int32) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByDateline(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`dateline` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePermission(p model.Predicate, value string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "permission", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePermissionIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "permission", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WherePermissionNotIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "permission", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByPermission(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`permission` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereToken(p model.Predicate, value string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereTokenIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereTokenNotIn(value []string) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "token", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByToken(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`token` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByUpdatedAt(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`updated_at` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByCreatedAt(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`created_at` "+order)
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDeletedAtIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *adminUserRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminUserRepoQueryBuilder) OrderByDeletedAt(asc bool) *adminUserRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`deleted_at` "+order)
	return qb
}
