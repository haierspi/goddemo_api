///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package admin_log_repo

import (
	"fmt"
	"time"

	"starfission_go_api/global"
	"starfission_go_api/internal/model"
	"starfission_go_api/pkg/timef"

	"github.com/pkg/errors"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

func Connection() *gorm.DB {
	db := global.DBEngine
	db.Config.NamingStrategy = schema.NamingStrategy{
		TablePrefix:   "pre_", // 表名前缀
		SingularTable: true,   // 使用单数表名
	}
	return db
}

func NewModel() *AdminLog {
	return new(AdminLog)
}

type adminLogRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	whereRaw []struct {
		query  string
		values []interface{}
	}
	limit  int
	offset int
}

func NewQueryBuilder() *adminLogRepoQueryBuilder {
	return new(adminLogRepoQueryBuilder)
}

func (qb *adminLogRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := Connection()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, where2 := range qb.whereRaw {
		ret = ret.Where(where2.query, where2.values...)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (t *AdminLog) Create() (id int64, err error) {
	t.CreatedAt = timef.Now()
	db := Connection()
	if err = db.Model(t).Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *AdminLog) Save() (err error) {
	t.UpdatedAt = timef.Now()

	db := Connection()
	if err = db.Model(t).Save(t).Error; err != nil {
		return errors.Wrap(err, "update err")
	}
	return nil
}

func (qb *adminLogRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {

	db := Connection()
	db = db.Model(&AdminLog{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

// 自减
func (qb *adminLogRepoQueryBuilder) Increment(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AdminLog{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" + ?", value)).Error; err != nil {
		return errors.Wrap(err, "increment err")
	}
	return nil
}

// 自增
func (qb *adminLogRepoQueryBuilder) Decrement(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AdminLog{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" - ?", value)).Error; err != nil {
		return errors.Wrap(err, "decrement err")
	}
	return nil
}

func (qb *adminLogRepoQueryBuilder) Delete() (err error) {

	db := Connection()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&AdminLog{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *adminLogRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&AdminLog{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *adminLogRepoQueryBuilder) First() (*AdminLog, error) {
	ret := &AdminLog{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *adminLogRepoQueryBuilder) Get() ([]*AdminLog, error) {
	return qb.QueryAll()
}

func (qb *adminLogRepoQueryBuilder) QueryOne() (*AdminLog, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *adminLogRepoQueryBuilder) QueryAll() ([]*AdminLog, error) {
	var ret []*AdminLog
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *adminLogRepoQueryBuilder) Limit(limit int) *adminLogRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *adminLogRepoQueryBuilder) Offset(offset int) *adminLogRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereRaw(query string, values ...interface{}) *adminLogRepoQueryBuilder {
	vals := make([]interface{}, len(values))
	for i, v := range values {
		vals[i] = v
	}
	qb.whereRaw = append(qb.whereRaw, struct {
		query  string
		values []interface{}
	}{
		query,
		vals,
	})
	return qb
}

// ----------

func (qb *adminLogRepoQueryBuilder) WhereId(p model.Predicate, value int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereIdIn(value []int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereIdNotIn(value []int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderById(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`id` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereAuid(p model.Predicate, value int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereAuidIn(value []int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereAuidNotIn(value []int64) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "auid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByAuid(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`auid` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUsername(p model.Predicate, value string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUsernameIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUsernameNotIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "username", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByUsername(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`username` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDateline(p model.Predicate, value int32) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDatelineIn(value []int32) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDatelineNotIn(value []int32) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "dateline", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByDateline(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`dateline` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereAction(p model.Predicate, value string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "action", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereActionIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "action", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereActionNotIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "action", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByAction(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`action` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUrl(p model.Predicate, value string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "url", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUrlIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "url", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUrlNotIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByUrl(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`url` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereMethod(p model.Predicate, value string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "method", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereMethodIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "method", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereMethodNotIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "method", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByMethod(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`method` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereRequest(p model.Predicate, value string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "request", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereRequestIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "request", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereRequestNotIn(value []string) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "request", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByRequest(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`request` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByUpdatedAt(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`updated_at` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByCreatedAt(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`created_at` "+order)
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDeletedAtIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *adminLogRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *adminLogRepoQueryBuilder) OrderByDeletedAt(asc bool) *adminLogRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`deleted_at` "+order)
	return qb
}
