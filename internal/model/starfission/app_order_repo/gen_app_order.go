///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package app_order_repo

import (
	"fmt"
	"time"

	"starfission_go_api/global"
	"starfission_go_api/internal/model"
	"starfission_go_api/pkg/timef"

	"github.com/pkg/errors"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

func Connection() *gorm.DB {
	db := global.DBEngine
	db.Config.NamingStrategy = schema.NamingStrategy{
		TablePrefix:   "pre_", // 表名前缀
		SingularTable: true,   // 使用单数表名
	}
	return db
}

func NewModel() *AppOrder {
	return new(AppOrder)
}

type appOrderRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	whereRaw []struct {
		query  string
		values []interface{}
	}
	limit  int
	offset int
}

func NewQueryBuilder() *appOrderRepoQueryBuilder {
	return new(appOrderRepoQueryBuilder)
}

func (qb *appOrderRepoQueryBuilder) buildQuery() *gorm.DB {
	ret := Connection()
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, where2 := range qb.whereRaw {
		ret = ret.Where(where2.query, where2.values...)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (t *AppOrder) Create() (id int64, err error) {
	t.CreatedAt = timef.Now()
	db := Connection()
	if err = db.Model(t).Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.AppOrderId, nil
}

func (t *AppOrder) Save() (err error) {
	t.UpdatedAt = timef.Now()

	db := Connection()
	if err = db.Model(t).Save(t).Error; err != nil {
		return errors.Wrap(err, "update err")
	}
	return nil
}

func (qb *appOrderRepoQueryBuilder) Updates(m map[string]interface{}) (err error) {

	db := Connection()
	db = db.Model(&AppOrder{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

// 自减
func (qb *appOrderRepoQueryBuilder) Increment(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AppOrder{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" + ?", value)).Error; err != nil {
		return errors.Wrap(err, "increment err")
	}
	return nil
}

// 自增
func (qb *appOrderRepoQueryBuilder) Decrement(column string, value int64) (err error) {

	db := Connection()
	db = db.Model(&AppOrder{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Update(column, gorm.Expr(column+" - ?", value)).Error; err != nil {
		return errors.Wrap(err, "decrement err")
	}
	return nil
}

func (qb *appOrderRepoQueryBuilder) Delete() (err error) {

	db := Connection()
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&AppOrder{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *appOrderRepoQueryBuilder) Count() (int64, error) {
	var c int64
	res := qb.buildQuery().Model(&AppOrder{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *appOrderRepoQueryBuilder) First() (*AppOrder, error) {
	ret := &AppOrder{}
	res := qb.buildQuery().First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *appOrderRepoQueryBuilder) Get() ([]*AppOrder, error) {
	return qb.QueryAll()
}

func (qb *appOrderRepoQueryBuilder) QueryOne() (*AppOrder, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *appOrderRepoQueryBuilder) QueryAll() ([]*AppOrder, error) {
	var ret []*AppOrder
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}

func (qb *appOrderRepoQueryBuilder) Limit(limit int) *appOrderRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *appOrderRepoQueryBuilder) Offset(offset int) *appOrderRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereRaw(query string, values ...interface{}) *appOrderRepoQueryBuilder {
	vals := make([]interface{}, len(values))
	for i, v := range values {
		vals[i] = v
	}
	qb.whereRaw = append(qb.whereRaw, struct {
		query  string
		values []interface{}
	}{
		query,
		vals,
	})
	return qb
}

// ----------

func (qb *appOrderRepoQueryBuilder) WhereAppOrderId(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_order_id", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppOrderIdIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_order_id", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppOrderIdNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_order_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByAppOrderId(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_order_id` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOrderId(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_id", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOrderIdIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_id", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOrderIdNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByOrderId(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`order_id` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppUid(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_uid", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppUidIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_uid", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppUidNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_uid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByAppUid(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_uid` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOpenId(p model.Predicate, value string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "open_id", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOpenIdIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "open_id", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOpenIdNotIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "open_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByOpenId(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`open_id` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereGoodsId(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereGoodsIdIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereGoodsIdNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "goods_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByGoodsId(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`goods_id` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUid(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUidIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUidNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "uid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByUid(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`uid` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppId(p model.Predicate, value int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppIdIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereAppIdNotIn(value []int64) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "app_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByAppId(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`app_id` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOutTradeNo(p model.Predicate, value string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "out_trade_no", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOutTradeNoIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "out_trade_no", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereOutTradeNoNotIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "out_trade_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByOutTradeNo(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`out_trade_no` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereMetadataImage(p model.Predicate, value string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "metadata_image", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereMetadataImageIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "metadata_image", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereMetadataImageNotIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "metadata_image", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByMetadataImage(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`metadata_image` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereNotifyUrl(p model.Predicate, value string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_url", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereNotifyUrlIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_url", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereNotifyUrlNotIn(value []string) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "notify_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByNotifyUrl(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`notify_url` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsSuccessNotifyed(p model.Predicate, value int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_success_notifyed", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsSuccessNotifyedIn(value []int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_success_notifyed", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsSuccessNotifyedNotIn(value []int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_success_notifyed", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByIsSuccessNotifyed(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_success_notifyed` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsDeleted(p model.Predicate, value int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsDeletedIn(value []int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereIsDeletedNotIn(value []int32) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByIsDeleted(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`is_deleted` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereCreatedAt(p model.Predicate, value time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByCreatedAt(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`created_at` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUpdatedAt(p model.Predicate, value time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByUpdatedAt(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`updated_at` "+order)
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereDeletedAt(p model.Predicate, value time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", p),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereDeletedAtIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) WhereDeletedAtNotIn(value []time.Time) *appOrderRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "deleted_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *appOrderRepoQueryBuilder) OrderByDeletedAt(asc bool) *appOrderRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "`deleted_at` "+order)
	return qb
}
